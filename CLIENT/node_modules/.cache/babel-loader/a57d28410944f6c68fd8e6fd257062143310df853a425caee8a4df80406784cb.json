{"ast":null,"code":"var _jsxFileName = \"/Users/midhu1/Projects/mediaconsumption/CLIENT/src/components/common/YoutubeSearch.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YoutubeSearch = ({\n  onSelect\n}) => {\n  _s();\n  const [query, setQuery] = useState('');\n  const [videos, setVideos] = useState([]);\n  const [timer, setTimer] = useState(null);\n  useEffect(() => {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    if (query.length < 3) {\n      setVideos([]);\n      return;\n    }\n    const newTimer = setTimeout(() => {\n      fetchVideos();\n    }, 250);\n    setTimer(newTimer);\n    return () => clearTimeout(newTimer);\n  }, [query]);\n  const fetchVideos = async () => {\n    const API_KEY = 'AIzaSyAjxXnuRYFH5M8w8-QAZ7yXt1Di8b1OH70'; // Ensure to replace this with your actual YouTube API key\n    const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(query)}&type=video&maxResults=10&key=${API_KEY}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.items) {\n        setVideos(data.items);\n      }\n    } catch (error) {\n      console.error('Failed to fetch videos:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search YouTube Videos\",\n      value: query,\n      onChange: e => setQuery(e.target.value),\n      className: \"border p-2 w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxHeight: '200px',\n        overflowY: 'auto'\n      },\n      children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"cursor-pointer hover:bg-gray-200 p-2 flex\",\n        onClick: () => onSelect(video),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: video.snippet.thumbnails.default.url,\n          alt: \"Thumbnail\",\n          style: {\n            width: '50px',\n            marginRight: '10px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this), video.snippet.title, \" - \", new Date(video.snippet.publishedAt).getFullYear()]\n      }, video.id.videoId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(YoutubeSearch, \"gMqpnE3csL41ux4lXsx9o4/j1OY=\");\n_c = YoutubeSearch;\nexport default YoutubeSearch;\nvar _c;\n$RefreshReg$(_c, \"YoutubeSearch\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","YoutubeSearch","onSelect","_s","query","setQuery","videos","setVideos","timer","setTimer","clearTimeout","length","newTimer","setTimeout","fetchVideos","API_KEY","url","encodeURIComponent","response","fetch","data","json","items","error","console","children","type","placeholder","value","onChange","e","target","className","fileName","_jsxFileName","lineNumber","columnNumber","style","maxHeight","overflowY","map","video","onClick","src","snippet","thumbnails","default","alt","width","marginRight","title","Date","publishedAt","getFullYear","id","videoId","_c","$RefreshReg$"],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/components/common/YoutubeSearch.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst YoutubeSearch = ({ onSelect }) => {\n    const [query, setQuery] = useState('');\n    const [videos, setVideos] = useState([]);\n    const [timer, setTimer] = useState(null);\n\n    useEffect(() => {\n        if (timer) {\n            clearTimeout(timer);\n        }\n\n        if (query.length < 3) {\n            setVideos([]);\n            return;\n        }\n\n        const newTimer = setTimeout(() => {\n            fetchVideos();\n        }, 250);\n\n        setTimer(newTimer);\n\n        return () => clearTimeout(newTimer);\n    }, [query]);\n\n    const fetchVideos = async () => {\n        const API_KEY = 'AIzaSyAjxXnuRYFH5M8w8-QAZ7yXt1Di8b1OH70';  // Ensure to replace this with your actual YouTube API key\n        const url = `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(query)}&type=video&maxResults=10&key=${API_KEY}`;\n\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            if (data.items) {\n                setVideos(data.items);\n            }\n        } catch (error) {\n            console.error('Failed to fetch videos:', error);\n        }\n    };\n\n    return (\n        <div>\n            <input\n                type=\"text\"\n                placeholder=\"Search YouTube Videos\"\n                value={query}\n                onChange={e => setQuery(e.target.value)}\n                className=\"border p-2 w-full\"\n            />\n            <div style={{ maxHeight: '200px', overflowY: 'auto' }}>\n                {videos.map((video) => (\n                    <div\n                        key={video.id.videoId}\n                        className=\"cursor-pointer hover:bg-gray-200 p-2 flex\"\n                        onClick={() => onSelect(video)}\n                    >\n                        <img src={video.snippet.thumbnails.default.url} alt=\"Thumbnail\" style={{ width: '50px', marginRight: '10px' }} />\n                        {video.snippet.title} - {new Date(video.snippet.publishedAt).getFullYear()}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default YoutubeSearch;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}