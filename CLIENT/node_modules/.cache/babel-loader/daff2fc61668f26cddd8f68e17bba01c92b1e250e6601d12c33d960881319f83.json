{"ast":null,"code":"var _jsxFileName = \"/Users/midhu1/Projects/mediaconsumption/CLIENT/src/pages/MediaPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { supabase } from '../supabaseClient';\nimport MovieCard from '../components/common/MovieCard';\nimport MovieSearch from '../components/common/MovieSearch';\nimport YoutubeSearch from '../components/common/YoutubeSearch';\nimport ShareWatchlist from '../components/common/ShareWatchlist';\nimport { arrayMoveImmutable as arrayMove } from 'array-move';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MediaPage = () => {\n  _s();\n  const [mediaItems, setMediaItems] = useState([]);\n  const [watchlistId, setWatchlistId] = useState('');\n  const [userId, setUserId] = useState('');\n  const {\n    watchlistName\n  } = useParams();\n  useEffect(() => {\n    const fetchSession = async () => {\n      let {\n        data: user\n      } = await supabase.auth.getUser();\n      if (user) {\n        setUserId(user.id);\n      }\n    };\n    fetchMediaItems();\n    fetchSession();\n  }, [watchlistName]);\n  const fetchMediaItems = async () => {\n    const {\n      data: watchlist\n    } = await supabase.from('watchlists').select('id').eq('name', watchlistName).single();\n    if (watchlist) {\n      setWatchlistId(watchlist.id);\n      const {\n        data: media\n      } = await supabase.from('media_items').select('*').eq('watchlist_id', watchlist.id).order('order', {\n        ascending: true\n      });\n      setMediaItems(media || []);\n    }\n  };\n  const onSortEnd = async result => {\n    if (!result.destination) return;\n    const reorderedItems = arrayMove(mediaItems, result.source.index, result.destination.index);\n    setMediaItems(reorderedItems);\n    try {\n      await Promise.all(reorderedItems.map((item, index) => supabase.from('media_items').update({\n        order: index\n      }).match({\n        id: item.id\n      })));\n    } catch (error) {\n      console.error('Error updating order on backend:', error);\n      fetchMediaItems();\n    }\n  };\n  const onShare = async friendId => {\n    if (!watchlistId) {\n      alert('Watchlist ID not available');\n      return;\n    }\n    const {\n      error\n    } = await supabase.from('watchlist_shares').insert([{\n      watchlist_id: watchlistId,\n      shared_with_user_id: friendId,\n      permission_type: 'edit'\n    }]);\n    if (error) {\n      console.error('Failed to share watchlist:', error.message);\n      alert('Failed to share watchlist.');\n    } else {\n      alert('Watchlist shared successfully!');\n    }\n  };\n  const handleSelectItem = async (item, type) => {\n    let newMedia;\n    if (type === 'youtube') {\n      const videoUrl = `https://www.youtube.com/watch?v=${item.id.videoId}`;\n      const imageUrl = item.snippet.thumbnails.high.url;\n      newMedia = await supabase.from('media_items').insert([{\n        title: item.snippet.title,\n        medium: 'YouTube',\n        watchlist_id: watchlistId,\n        image: imageUrl,\n        url: videoUrl,\n        release_date: item.snippet.publishedAt.substring(0, 10),\n        order: mediaItems.length\n      }]).select();\n    } else {\n      const imageUrl = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '';\n      newMedia = await supabase.from('media_items').insert([{\n        title: item.title || item.name,\n        medium: item.media_type === 'movie' ? 'Movie' : 'TV',\n        watchlist_id: watchlistId,\n        image: imageUrl,\n        release_date: item.release_date || '',\n        order: mediaItems.length\n      }]).select();\n    }\n    const {\n      data,\n      error\n    } = newMedia;\n    if (error) {\n      console.error('Failed to add item:', error.message);\n    } else {\n      setMediaItems([...mediaItems, ...data]);\n    }\n  };\n  const handleDeleteMediaItem = async (deletedId, medium) => {\n    if (window.confirm(`Are you sure you want to delete this ${medium}?`)) {\n      const {\n        error\n      } = await supabase.from('media_items').delete().match({\n        id: deletedId\n      });\n      if (error) {\n        console.error('Error deleting media item:', error.message);\n      } else {\n        setMediaItems(currentMediaItems => currentMediaItems.filter(item => item.id !== deletedId));\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mx-auto p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-xl font-bold\",\n      children: `Media in \"${watchlistName}\"`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MovieSearch, {\n      onSelect: item => handleSelectItem(item, 'movie')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YoutubeSearch, {\n      onSelect: item => handleSelectItem(item, 'youtube')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onSortEnd,\n      children: mediaItems.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n        draggableId: item.id.toString(),\n        index: index,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.draggableProps,\n          ...provided.dragHandleProps,\n          children: /*#__PURE__*/_jsxDEV(MovieCard, {\n            id: item.id,\n            title: item.title,\n            medium: item.medium,\n            length: item.length,\n            date: item.release_date,\n            synopsis: item.synopsis,\n            image: item.image,\n            url: item.url,\n            onDelete: () => handleDeleteMediaItem(item.id, item.medium)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ShareWatchlist, {\n      onShare: onShare,\n      userId: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(MediaPage, \"XAaRaK/euoaskA/6hCu/mT9ICkE=\", false, function () {\n  return [useParams];\n});\n_c = MediaPage;\nexport default MediaPage;\n\n// ------- // \n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n// import { supabase } from '../supabaseClient';\n// import MovieCard from '../components/common/MovieCard';\n// import MovieSearch from '../components/common/MovieSearch';\n// import YoutubeSearch from '../components/common/YoutubeSearch';\n// import ShareWatchlist from '../components/common/ShareWatchlist';\n// import { arrayMoveImmutable as arrayMove } from 'array-move';\n\n// const SortableItem = ({ item, index, onDelete }) => (\n//   <Draggable draggableId={item.id.toString()} index={index}>\n//     {(provided) => (\n//       <div\n//         ref={provided.innerRef}\n//         {...provided.draggableProps}\n//         {...provided.dragHandleProps}>\n//         <MovieCard\n//           key={item.id}\n//           id={item.id}\n//           title={item.title}\n//           medium={item.medium}\n//           length={item.length}\n//           date={item.release_date.substring(0, 4)}\n//           synopsis={item.synopsis}\n//           image={item.image}\n//           url={item.url}\n//           onDelete={() => onDelete(item.id, item.medium)}\n//         />\n//       </div>\n//     )}\n//   </Draggable>\n// );\n\n// const SortableList = ({ items, onDelete }) => (\n//   <Droppable droppableId=\"droppable\">\n//     {(provided) => (\n//       <div\n//         ref={provided.innerRef}\n//         {...provided.droppableProps}>\n//         {items.map((item, index) => (\n//           <SortableItem key={item.id} item={item} index={index} onDelete={onDelete} />\n//         ))}\n//         {provided.placeholder}\n//       </div>\n//     )}\n//   </Droppable>\n// );\n\n// const MediaPage = () => {\n//     const [mediaItems, setMediaItems] = useState([]);\n//     const [watchlistId, setWatchlistId] = useState('');\n//     const [userId, setUserId] = useState('');\n//     const { watchlistName } = useParams();\n\n//     useEffect(() => {\n//         const fetchSession = async () => {\n//             let { data: user } = await supabase.auth.getUser();\n//             if (user) {\n//                 setUserId(user.id);\n//             }\n//         };\n\n//         fetchMediaItems();\n//         fetchSession();\n//     }, [watchlistName]);\n\n//     const fetchMediaItems = async () => {\n//         const { data: watchlist } = await supabase\n//             .from('watchlists')\n//             .select('id')\n//             .eq('name', watchlistName)\n//             .single();\n\n//         if (watchlist) {\n//             setWatchlistId(watchlist.id);\n//             const { data: media } = await supabase\n//                 .from('media_items')\n//                 .select('*')\n//                 .eq('watchlist_id', watchlist.id)\n//                 .order('order', { ascending: true });\n\n//             setMediaItems(media || []);\n//         }\n//     };\n\n//     const onSortEnd = async (result) => {\n//         if (!result.destination) return;\n\n//         const reorderedItems = arrayMove(mediaItems, result.source.index, result.destination.index);\n//         setMediaItems(reorderedItems);\n\n//         // Since you're using await, the function must be marked as async\n//         try {\n//             await Promise.all(reorderedItems.map((item, index) => \n//                 supabase.from('media_items').update({ order: index }).match({ id: item.id })\n//             ));\n//         } catch (error) {\n//             console.error('Error updating order on backend:', error);\n//             // Optionally rollback to previous state\n//             fetchMediaItems();\n//         }\n//     };\n\n//     const onShare = async (friendId) => {\n//         if (!watchlistId) {\n//             alert('Watchlist ID not available');\n//             return;\n//         }\n\n//         const { error } = await supabase\n//             .from('watchlist_shares')\n//             .insert([{\n//                 watchlist_id: watchlistId,\n//                 shared_with_user_id: friendId,\n//                 permission_type: 'edit'\n//             }]);\n\n//         if (error) {\n//             console.error('Failed to share watchlist:', error.message);\n//             alert('Failed to share watchlist.');\n//         } else {\n//             alert('Watchlist shared successfully!');\n//         }\n//     };\n\n//     const handleSelectItem = async (item, type) => {\n//         let newMedia;\n//         if (type === 'youtube') {\n//             const videoUrl = `https://www.youtube.com/watch?v=${item.id.videoId}`;\n//             const imageUrl = item.snippet.thumbnails.high.url;\n//             newMedia = await supabase.from('media_items').insert([{\n//                 title: item.snippet.title,\n//                 medium: 'YouTube',\n//                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n//                 image: imageUrl,\n//                 url: videoUrl,  // Storing YouTube video URL\n//                 release_date: item.snippet.publishedAt.substring(0, 10),\n//                 order: mediaItems.length\n//             }])\n//             .select();\n//         } else { \n//             const imageUrl = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '';\n//             newMedia = await supabase.from('media_items').insert([{\n//                 title: item.title || item.name,\n//                 medium: item.media_type === 'movie' ? 'Movie' : 'TV',\n//                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n//                 image: imageUrl,\n//                 release_date: item.release_date || '',\n//                 order: mediaItems.length\n//             }])\n//             .select();\n//         }\n\n//         const { data, error } = newMedia;\n//         if (error) {\n//             console.error('Failed to add item:', error.message);\n//         } else {\n//             setMediaItems([...mediaItems, ...data]);\n//         }\n//     };    \n\n//     const handleDeleteMediaItem = async (deletedId, medium) => {\n//         if (window.confirm(`Are you sure you want to delete this ${medium}?`)) {\n//             const { error } = await supabase\n//                 .from('media_items')\n//                 .delete()\n//                 .match({ id: deletedId });\n\n//             if (error) {\n//                 console.error('Error deleting media item:', error.message);\n//             } else {\n//                 setMediaItems(currentMediaItems => currentMediaItems.filter(item => item.id !== deletedId));\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mx-auto p-4\">\n//             <h1 className=\"text-xl font-bold\">{`Media in \"${watchlistName}\"`}</h1>\n//             <MovieSearch onSelect={(item) => handleSelectItem(item, 'movie')} />\n//             <YoutubeSearch onSelect={(item) => handleSelectItem(item, 'youtube')} />\n//             <DragDropContext onDragEnd={onSortEnd}>\n//                 <SortableList items={mediaItems} onDelete={(id, medium) => handleDeleteMediaItem(id, medium)} />\n//             </DragDropContext>\n//             <ShareWatchlist onShare={onShare} userId={userId} />\n//         </div>\n//     );\n// };\n\n// export default MediaPage;\n\n// // import React, { useEffect, useState } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { sortableContainer, sortableElement } from 'react-sortable-hoc';\n// // import { arrayMoveImmutable as arrayMove } from 'array-move';\n// // import { supabase } from '../supabaseClient';\n// // import MovieCard from '../components/common/MovieCard';\n// // import MovieSearch from '../components/common/MovieSearch';\n// // import YoutubeSearch from '../components/common/YoutubeSearch';\n// // import ShareWatchlist from '../components/common/ShareWatchlist';\n\n// // const SortableItem = sortableElement(({ item, onDelete }) => {\n// //     return (\n// //       <div> {/* Wrapping in a native div element */}\n// //         <MovieCard\n// //             key={item.id}\n// //             id={item.id}\n// //             title={item.title}\n// //             medium={item.medium}\n// //             length={item.length}\n// //             date={item.release_date.substring(0, 4)}\n// //             synopsis={item.synopsis}\n// //             image={item.image}\n// //             url={item.url}\n// //             onDelete={() => onDelete(item.id, item.medium)}\n// //         />\n// //       </div>\n// //     );\n// // });\n\n// // const SortableList = sortableContainer(({ items, onDelete }) => {\n// //   return (\n// //     <div>\n// //       {items.map((item, index) => (\n// //         <SortableItem key={`item.id`} index={index} item={item} onDelete={onDelete} />\n// //       ))}\n// //     </div>\n// //   );\n// // });\n\n// // const MediaPage = () => {\n// //     const [mediaItems, setMediaItems] = useState([]);\n// //     const [watchlistId, setWatchlistId] = useState('');\n// //     const [userId, setUserId] = useState('');\n// //     const { username, watchlistName } = useParams();\n\n// //     useEffect(() => {\n// //         const fetchSession = async () => {\n// //             let { data: user } = await supabase.auth.getUser();\n// //             if (user) {\n// //                 setUserId(user.id);\n// //             }\n// //         };\n\n// //         fetchMediaItems();\n// //         fetchSession();\n// //     }, [watchlistName]);\n\n// //     const fetchMediaItems = async () => {\n// //         const { data: watchlist } = await supabase\n// //             .from('watchlists')\n// //             .select('id')\n// //             .eq('name', watchlistName)\n// //             .single()\n// //             .select();\n\n// //         if (watchlist) {\n// //             const { data: media } = await supabase\n// //                 .from('media_items')\n// //                 .select('*')\n// //                 .eq('watchlist_id', watchlist.id)\n// //                 .order('order', { ascending: true });\n\n// //             setMediaItems(media || []);\n// //         }\n// //     };\n\n// //     const onSortEnd = async ({ oldIndex, newIndex }) => {\n// //         const reorderedItems = arrayMove(mediaItems, oldIndex, newIndex);\n// //         setMediaItems(reorderedItems);\n\n// //         try {\n// //             await Promise.all(reorderedItems.map((item, index) => \n// //                 supabase.from('media_items').update({ order: index }).match({ id: item.id })\n// //             ));\n// //         } catch (error) {\n// //             console.error('Error updating order on backend:', error);\n// //             // Optionally rollback to previous state\n// //             fetchMediaItems();\n// //         }\n// //     };\n\n// //     const onShare = async (friendId) => {\n// //         if (!watchlistId) {\n// //             alert('Watchlist ID not available');\n// //             return;\n// //         }\n\n// //         const { error } = await supabase\n// //             .from('watchlist_shares')\n// //             .insert([{\n// //                 watchlist_id: watchlistId,\n// //                 shared_with_user_id: friendId,\n// //                 permission_type: 'edit'\n// //             }]);\n\n// //         if (error) {\n// //             console.error('Failed to share watchlist:', error.message);\n// //             alert('Failed to share watchlist.');\n// //         } else {\n// //             alert('Watchlist shared successfully!');\n// //         }\n// //     };\n\n// //     const handleSelectItem = async (item, type) => {\n// //         let newMedia;\n// //         if (type === 'youtube') {\n// //             const videoUrl = `https://www.youtube.com/watch?v=${item.id.videoId}`;\n// //             const imageUrl = item.snippet.thumbnails.high.url;\n// //             newMedia = await supabase.from('media_items').insert([{\n// //                 title: item.snippet.title,\n// //                 medium: 'YouTube',\n// //                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n// //                 image: imageUrl,\n// //                 url: videoUrl,  // Storing YouTube video URL\n// //                 release_date: item.snippet.publishedAt.substring(0, 10),\n// //                 order: mediaItems.length\n// //             }])\n// //             .select();\n// //         } else { \n// //             const imageUrl = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '';\n// //             newMedia = await supabase.from('media_items').insert([{\n// //                 title: item.title || item.name,\n// //                 medium: item.media_type === 'movie' ? 'Movie' : 'TV',\n// //                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n// //                 image: imageUrl,\n// //                 release_date: item.release_date || '',\n// //                 order: mediaItems.length\n// //             }])\n// //             .select();\n// //         }\n\n// //         const { data, error } = newMedia;\n// //         if (error) {\n// //             console.error('Failed to add item:', error.message);\n// //         } else {\n// //             setMediaItems([...mediaItems, ...data]);\n// //         }\n// //     };    \n\n// //     const handleDeleteMediaItem = async (deletedId, medium) => {\n// //         if (window.confirm(`Are you sure you want to delete this ${medium}?`)) {\n// //             const { error } = await supabase\n// //                 .from('media_items')\n// //                 .delete()\n// //                 .match({ id: deletedId });\n\n// //             if (error) {\n// //                 console.error('Error deleting media item:', error.message);\n// //             } else {\n// //                 setMediaItems(currentMediaItems => currentMediaItems.filter(item => item.id !== deletedId));\n// //             }\n// //         }\n// //     };\n\n// //     return (\n// //         <div className=\"container mx-auto p-4\">\n// //             <h1 className=\"text-xl font-bold\">{`Media in \"${watchlistName}\"`}</h1>\n// //             <MovieSearch onSelect={(item) => handleSelectItem(item, 'movie')} />\n// //             <YoutubeSearch onSelect={(item) => handleSelectItem(item, 'youtube')} />\n// //             <ShareWatchlist onShare={ShareWatchlist} userId = {userId} /> \n// //             <SortableList items={mediaItems} onSortEnd={onSortEnd} onDelete={handleDeleteMediaItem} useDragHandle={true} />\n// //         </div>\n// //     );\n// // };\n\n// // export default MediaPage;\nvar _c;\n$RefreshReg$(_c, \"MediaPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","DragDropContext","Draggable","Droppable","supabase","MovieCard","MovieSearch","YoutubeSearch","ShareWatchlist","arrayMoveImmutable","arrayMove","jsxDEV","_jsxDEV","MediaPage","_s","mediaItems","setMediaItems","watchlistId","setWatchlistId","userId","setUserId","watchlistName","fetchSession","data","user","auth","getUser","id","fetchMediaItems","watchlist","from","select","eq","single","media","order","ascending","onSortEnd","result","destination","reorderedItems","source","index","Promise","all","map","item","update","match","error","console","onShare","friendId","alert","insert","watchlist_id","shared_with_user_id","permission_type","message","handleSelectItem","type","newMedia","videoUrl","videoId","imageUrl","snippet","thumbnails","high","url","title","medium","image","release_date","publishedAt","substring","length","poster_path","name","media_type","handleDeleteMediaItem","deletedId","window","confirm","delete","currentMediaItems","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelect","onDragEnd","draggableId","toString","provided","ref","innerRef","draggableProps","dragHandleProps","date","synopsis","onDelete","_c","$RefreshReg$"],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/pages/MediaPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { supabase } from '../supabaseClient';\nimport MovieCard from '../components/common/MovieCard';\nimport MovieSearch from '../components/common/MovieSearch';\nimport YoutubeSearch from '../components/common/YoutubeSearch';\nimport ShareWatchlist from '../components/common/ShareWatchlist';\nimport { arrayMoveImmutable as arrayMove } from 'array-move';\n\nconst MediaPage = () => {\n    const [mediaItems, setMediaItems] = useState([]);\n    const [watchlistId, setWatchlistId] = useState('');\n    const [userId, setUserId] = useState('');\n    const { watchlistName } = useParams();\n\n    useEffect(() => {\n        const fetchSession = async () => {\n            let { data: user } = await supabase.auth.getUser();\n            if (user) {\n                setUserId(user.id);\n            }\n        };\n\n        fetchMediaItems();\n        fetchSession();\n    }, [watchlistName]);\n\n    const fetchMediaItems = async () => {\n        const { data: watchlist } = await supabase.from('watchlists').select('id').eq('name', watchlistName).single();\n        if (watchlist) {\n            setWatchlistId(watchlist.id);\n            const { data: media } = await supabase.from('media_items').select('*').eq('watchlist_id', watchlist.id).order('order', { ascending: true });\n            setMediaItems(media || []);\n        }\n    };\n\n    const onSortEnd = async (result) => {\n        if (!result.destination) return;\n        const reorderedItems = arrayMove(mediaItems, result.source.index, result.destination.index);\n        setMediaItems(reorderedItems);\n\n        try {\n            await Promise.all(reorderedItems.map((item, index) => \n                supabase.from('media_items').update({ order: index }).match({ id: item.id })\n            ));\n        } catch (error) {\n            console.error('Error updating order on backend:', error);\n            fetchMediaItems();\n        }\n    };\n\n    const onShare = async (friendId) => {\n        if (!watchlistId) {\n            alert('Watchlist ID not available');\n            return;\n        }\n        const { error } = await supabase.from('watchlist_shares').insert([{ watchlist_id: watchlistId, shared_with_user_id: friendId, permission_type: 'edit' }]);\n        if (error) {\n            console.error('Failed to share watchlist:', error.message);\n            alert('Failed to share watchlist.');\n        } else {\n            alert('Watchlist shared successfully!');\n        }\n    };\n\n    const handleSelectItem = async (item, type) => {\n        let newMedia;\n        if (type === 'youtube') {\n            const videoUrl = `https://www.youtube.com/watch?v=${item.id.videoId}`;\n            const imageUrl = item.snippet.thumbnails.high.url;\n            newMedia = await supabase.from('media_items').insert([{ title: item.snippet.title, medium: 'YouTube', watchlist_id: watchlistId, image: imageUrl, url: videoUrl, release_date: item.snippet.publishedAt.substring(0, 10), order: mediaItems.length }]).select();\n        } else {\n            const imageUrl = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '';\n            newMedia = await supabase.from('media_items').insert([{ title: item.title || item.name, medium: item.media_type === 'movie' ? 'Movie' : 'TV', watchlist_id: watchlistId, image: imageUrl, release_date: item.release_date || '', order: mediaItems.length }]).select();\n        }\n        const { data, error } = newMedia;\n        if (error) {\n            console.error('Failed to add item:', error.message);\n        } else {\n            setMediaItems([...mediaItems, ...data]);\n        }\n    };\n\n    const handleDeleteMediaItem = async (deletedId, medium) => {\n        if (window.confirm(`Are you sure you want to delete this ${medium}?`)) {\n            const { error } = await supabase.from('media_items').delete().match({ id: deletedId });\n            if (error) {\n                console.error('Error deleting media item:', error.message);\n            } else {\n                setMediaItems(currentMediaItems => currentMediaItems.filter(item => item.id !== deletedId));\n            }\n        }\n    };\n\n    return (\n        <div className=\"container mx-auto p-4\">\n            <h1 className=\"text-xl font-bold\">{`Media in \"${watchlistName}\"`}</h1>\n            <MovieSearch onSelect={(item) => handleSelectItem(item, 'movie')} />\n            <YoutubeSearch onSelect={(item) => handleSelectItem(item, 'youtube')} />\n            <DragDropContext onDragEnd={onSortEnd}>\n                {mediaItems.map((item, index) => (\n                    <Draggable key={item.id} draggableId={item.id.toString()} index={index}>\n                        {(provided) => (\n                            <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                <MovieCard\n                                    id={item.id}\n                                    title={item.title}\n                                    medium={item.medium}\n                                    length={item.length}\n                                    date={item.release_date}\n                                    synopsis={item.synopsis}\n                                    image={item.image}\n                                    url={item.url}\n                                    onDelete={() => handleDeleteMediaItem(item.id, item.medium)}\n                                />\n                            </div>\n                        )}\n                    </Draggable>\n                ))}\n            </DragDropContext>\n            <ShareWatchlist onShare={onShare} userId={userId} />\n        </div>\n    );\n};\n\nexport default MediaPage;\n\n\n\n\n\n// ------- // \n\n\n\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n// import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\n// import { supabase } from '../supabaseClient';\n// import MovieCard from '../components/common/MovieCard';\n// import MovieSearch from '../components/common/MovieSearch';\n// import YoutubeSearch from '../components/common/YoutubeSearch';\n// import ShareWatchlist from '../components/common/ShareWatchlist';\n// import { arrayMoveImmutable as arrayMove } from 'array-move';\n\n// const SortableItem = ({ item, index, onDelete }) => (\n//   <Draggable draggableId={item.id.toString()} index={index}>\n//     {(provided) => (\n//       <div\n//         ref={provided.innerRef}\n//         {...provided.draggableProps}\n//         {...provided.dragHandleProps}>\n//         <MovieCard\n//           key={item.id}\n//           id={item.id}\n//           title={item.title}\n//           medium={item.medium}\n//           length={item.length}\n//           date={item.release_date.substring(0, 4)}\n//           synopsis={item.synopsis}\n//           image={item.image}\n//           url={item.url}\n//           onDelete={() => onDelete(item.id, item.medium)}\n//         />\n//       </div>\n//     )}\n//   </Draggable>\n// );\n\n// const SortableList = ({ items, onDelete }) => (\n//   <Droppable droppableId=\"droppable\">\n//     {(provided) => (\n//       <div\n//         ref={provided.innerRef}\n//         {...provided.droppableProps}>\n//         {items.map((item, index) => (\n//           <SortableItem key={item.id} item={item} index={index} onDelete={onDelete} />\n//         ))}\n//         {provided.placeholder}\n//       </div>\n//     )}\n//   </Droppable>\n// );\n\n// const MediaPage = () => {\n//     const [mediaItems, setMediaItems] = useState([]);\n//     const [watchlistId, setWatchlistId] = useState('');\n//     const [userId, setUserId] = useState('');\n//     const { watchlistName } = useParams();\n\n//     useEffect(() => {\n//         const fetchSession = async () => {\n//             let { data: user } = await supabase.auth.getUser();\n//             if (user) {\n//                 setUserId(user.id);\n//             }\n//         };\n\n//         fetchMediaItems();\n//         fetchSession();\n//     }, [watchlistName]);\n\n//     const fetchMediaItems = async () => {\n//         const { data: watchlist } = await supabase\n//             .from('watchlists')\n//             .select('id')\n//             .eq('name', watchlistName)\n//             .single();\n\n//         if (watchlist) {\n//             setWatchlistId(watchlist.id);\n//             const { data: media } = await supabase\n//                 .from('media_items')\n//                 .select('*')\n//                 .eq('watchlist_id', watchlist.id)\n//                 .order('order', { ascending: true });\n\n//             setMediaItems(media || []);\n//         }\n//     };\n\n//     const onSortEnd = async (result) => {\n//         if (!result.destination) return;\n    \n//         const reorderedItems = arrayMove(mediaItems, result.source.index, result.destination.index);\n//         setMediaItems(reorderedItems);\n    \n//         // Since you're using await, the function must be marked as async\n//         try {\n//             await Promise.all(reorderedItems.map((item, index) => \n//                 supabase.from('media_items').update({ order: index }).match({ id: item.id })\n//             ));\n//         } catch (error) {\n//             console.error('Error updating order on backend:', error);\n//             // Optionally rollback to previous state\n//             fetchMediaItems();\n//         }\n//     };\n    \n\n//     const onShare = async (friendId) => {\n//         if (!watchlistId) {\n//             alert('Watchlist ID not available');\n//             return;\n//         }\n\n//         const { error } = await supabase\n//             .from('watchlist_shares')\n//             .insert([{\n//                 watchlist_id: watchlistId,\n//                 shared_with_user_id: friendId,\n//                 permission_type: 'edit'\n//             }]);\n\n//         if (error) {\n//             console.error('Failed to share watchlist:', error.message);\n//             alert('Failed to share watchlist.');\n//         } else {\n//             alert('Watchlist shared successfully!');\n//         }\n//     };\n\n//     const handleSelectItem = async (item, type) => {\n//         let newMedia;\n//         if (type === 'youtube') {\n//             const videoUrl = `https://www.youtube.com/watch?v=${item.id.videoId}`;\n//             const imageUrl = item.snippet.thumbnails.high.url;\n//             newMedia = await supabase.from('media_items').insert([{\n//                 title: item.snippet.title,\n//                 medium: 'YouTube',\n//                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n//                 image: imageUrl,\n//                 url: videoUrl,  // Storing YouTube video URL\n//                 release_date: item.snippet.publishedAt.substring(0, 10),\n//                 order: mediaItems.length\n//             }])\n//             .select();\n//         } else { \n//             const imageUrl = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '';\n//             newMedia = await supabase.from('media_items').insert([{\n//                 title: item.title || item.name,\n//                 medium: item.media_type === 'movie' ? 'Movie' : 'TV',\n//                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n//                 image: imageUrl,\n//                 release_date: item.release_date || '',\n//                 order: mediaItems.length\n//             }])\n//             .select();\n//         }\n    \n//         const { data, error } = newMedia;\n//         if (error) {\n//             console.error('Failed to add item:', error.message);\n//         } else {\n//             setMediaItems([...mediaItems, ...data]);\n//         }\n//     };    \n\n//     const handleDeleteMediaItem = async (deletedId, medium) => {\n//         if (window.confirm(`Are you sure you want to delete this ${medium}?`)) {\n//             const { error } = await supabase\n//                 .from('media_items')\n//                 .delete()\n//                 .match({ id: deletedId });\n\n//             if (error) {\n//                 console.error('Error deleting media item:', error.message);\n//             } else {\n//                 setMediaItems(currentMediaItems => currentMediaItems.filter(item => item.id !== deletedId));\n//             }\n//         }\n//     };\n\n//     return (\n//         <div className=\"container mx-auto p-4\">\n//             <h1 className=\"text-xl font-bold\">{`Media in \"${watchlistName}\"`}</h1>\n//             <MovieSearch onSelect={(item) => handleSelectItem(item, 'movie')} />\n//             <YoutubeSearch onSelect={(item) => handleSelectItem(item, 'youtube')} />\n//             <DragDropContext onDragEnd={onSortEnd}>\n//                 <SortableList items={mediaItems} onDelete={(id, medium) => handleDeleteMediaItem(id, medium)} />\n//             </DragDropContext>\n//             <ShareWatchlist onShare={onShare} userId={userId} />\n//         </div>\n//     );\n// };\n\n// export default MediaPage;\n\n// // import React, { useEffect, useState } from 'react';\n// // import { useParams } from 'react-router-dom';\n// // import { sortableContainer, sortableElement } from 'react-sortable-hoc';\n// // import { arrayMoveImmutable as arrayMove } from 'array-move';\n// // import { supabase } from '../supabaseClient';\n// // import MovieCard from '../components/common/MovieCard';\n// // import MovieSearch from '../components/common/MovieSearch';\n// // import YoutubeSearch from '../components/common/YoutubeSearch';\n// // import ShareWatchlist from '../components/common/ShareWatchlist';\n\n// // const SortableItem = sortableElement(({ item, onDelete }) => {\n// //     return (\n// //       <div> {/* Wrapping in a native div element */}\n// //         <MovieCard\n// //             key={item.id}\n// //             id={item.id}\n// //             title={item.title}\n// //             medium={item.medium}\n// //             length={item.length}\n// //             date={item.release_date.substring(0, 4)}\n// //             synopsis={item.synopsis}\n// //             image={item.image}\n// //             url={item.url}\n// //             onDelete={() => onDelete(item.id, item.medium)}\n// //         />\n// //       </div>\n// //     );\n// // });\n\n\n// // const SortableList = sortableContainer(({ items, onDelete }) => {\n// //   return (\n// //     <div>\n// //       {items.map((item, index) => (\n// //         <SortableItem key={`item.id`} index={index} item={item} onDelete={onDelete} />\n// //       ))}\n// //     </div>\n// //   );\n// // });\n\n// // const MediaPage = () => {\n// //     const [mediaItems, setMediaItems] = useState([]);\n// //     const [watchlistId, setWatchlistId] = useState('');\n// //     const [userId, setUserId] = useState('');\n// //     const { username, watchlistName } = useParams();\n\n// //     useEffect(() => {\n// //         const fetchSession = async () => {\n// //             let { data: user } = await supabase.auth.getUser();\n// //             if (user) {\n// //                 setUserId(user.id);\n// //             }\n// //         };\n\n// //         fetchMediaItems();\n// //         fetchSession();\n// //     }, [watchlistName]);\n\n\n// //     const fetchMediaItems = async () => {\n// //         const { data: watchlist } = await supabase\n// //             .from('watchlists')\n// //             .select('id')\n// //             .eq('name', watchlistName)\n// //             .single()\n// //             .select();\n\n// //         if (watchlist) {\n// //             const { data: media } = await supabase\n// //                 .from('media_items')\n// //                 .select('*')\n// //                 .eq('watchlist_id', watchlist.id)\n// //                 .order('order', { ascending: true });\n\n// //             setMediaItems(media || []);\n// //         }\n// //     };\n\n// //     const onSortEnd = async ({ oldIndex, newIndex }) => {\n// //         const reorderedItems = arrayMove(mediaItems, oldIndex, newIndex);\n// //         setMediaItems(reorderedItems);\n    \n// //         try {\n// //             await Promise.all(reorderedItems.map((item, index) => \n// //                 supabase.from('media_items').update({ order: index }).match({ id: item.id })\n// //             ));\n// //         } catch (error) {\n// //             console.error('Error updating order on backend:', error);\n// //             // Optionally rollback to previous state\n// //             fetchMediaItems();\n// //         }\n// //     };\n\n// //     const onShare = async (friendId) => {\n// //         if (!watchlistId) {\n// //             alert('Watchlist ID not available');\n// //             return;\n// //         }\n\n// //         const { error } = await supabase\n// //             .from('watchlist_shares')\n// //             .insert([{\n// //                 watchlist_id: watchlistId,\n// //                 shared_with_user_id: friendId,\n// //                 permission_type: 'edit'\n// //             }]);\n\n// //         if (error) {\n// //             console.error('Failed to share watchlist:', error.message);\n// //             alert('Failed to share watchlist.');\n// //         } else {\n// //             alert('Watchlist shared successfully!');\n// //         }\n// //     };\n\n\n// //     const handleSelectItem = async (item, type) => {\n// //         let newMedia;\n// //         if (type === 'youtube') {\n// //             const videoUrl = `https://www.youtube.com/watch?v=${item.id.videoId}`;\n// //             const imageUrl = item.snippet.thumbnails.high.url;\n// //             newMedia = await supabase.from('media_items').insert([{\n// //                 title: item.snippet.title,\n// //                 medium: 'YouTube',\n// //                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n// //                 image: imageUrl,\n// //                 url: videoUrl,  // Storing YouTube video URL\n// //                 release_date: item.snippet.publishedAt.substring(0, 10),\n// //                 order: mediaItems.length\n// //             }])\n// //             .select();\n// //         } else { \n// //             const imageUrl = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : '';\n// //             newMedia = await supabase.from('media_items').insert([{\n// //                 title: item.title || item.name,\n// //                 medium: item.media_type === 'movie' ? 'Movie' : 'TV',\n// //                 watchlist_id: (await supabase.from('watchlists').select('id').eq('name', watchlistName).single()).data.id,\n// //                 image: imageUrl,\n// //                 release_date: item.release_date || '',\n// //                 order: mediaItems.length\n// //             }])\n// //             .select();\n// //         }\n    \n// //         const { data, error } = newMedia;\n// //         if (error) {\n// //             console.error('Failed to add item:', error.message);\n// //         } else {\n// //             setMediaItems([...mediaItems, ...data]);\n// //         }\n// //     };    \n\n// //     const handleDeleteMediaItem = async (deletedId, medium) => {\n// //         if (window.confirm(`Are you sure you want to delete this ${medium}?`)) {\n// //             const { error } = await supabase\n// //                 .from('media_items')\n// //                 .delete()\n// //                 .match({ id: deletedId });\n\n// //             if (error) {\n// //                 console.error('Error deleting media item:', error.message);\n// //             } else {\n// //                 setMediaItems(currentMediaItems => currentMediaItems.filter(item => item.id !== deletedId));\n// //             }\n// //         }\n// //     };\n\n// //     return (\n// //         <div className=\"container mx-auto p-4\">\n// //             <h1 className=\"text-xl font-bold\">{`Media in \"${watchlistName}\"`}</h1>\n// //             <MovieSearch onSelect={(item) => handleSelectItem(item, 'movie')} />\n// //             <YoutubeSearch onSelect={(item) => handleSelectItem(item, 'youtube')} />\n// //             <ShareWatchlist onShare={ShareWatchlist} userId = {userId} /> \n// //             <SortableList items={mediaItems} onSortEnd={onSortEnd} onDelete={handleDeleteMediaItem} useDragHandle={true} />\n// //         </div>\n// //     );\n// // };\n\n// // export default MediaPage;\n"],"mappings":"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AAA,OACnD,CAAC;AAEd,CAAC;AAAC7E,EAAA,CAlHID,SAAS;EAAA,QAIeb,SAAS;AAAA;AAAAwG,EAAA,GAJjC3F,SAAS;AAoHf,eAAeA,SAAS;;AAMxB;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA2F,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}