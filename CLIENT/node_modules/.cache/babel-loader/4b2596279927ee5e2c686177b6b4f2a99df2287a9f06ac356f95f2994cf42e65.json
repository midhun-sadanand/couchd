{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { supabase } from '../../supabaseClient';\n\n// const ShareWatchlist = ({ onShare, userId }) => {\n//     const [friends, setFriends] = useState([]);\n//     const [selectedFriend, setSelectedFriend] = useState('');\n\n//     useEffect(() => {\n//         if (!userId) return;  // Only fetch if userId is available\n//         fetchFriends();\n//     }, [userId]);  // Add userId as a dependency\n\n//     const fetchFriends = async () => {\n//         const { data, error } = await supabase\n//             .from('friends')\n//             .select(`\n//                 friend_id,\n//                 profile:friend_id (\n//                     username\n//                 )  // Fetching username from the related profiles table\n//             `)\n//             .eq('user_id', userId)\n//             .eq('status', 'accepted');\n\n//         console.log('Fetched friends:', data);  // Debugging (optional\n//         if (error) {\n//             console.error('Error fetching friends:', error.message);\n//         } else {\n//             setFriends(data.map(friend => ({\n//                 id: friend.friend_id,\n//                 username: friend.profile.username  // Ensure 'profile' is the correct relationship alias\n//             })));\n\n//         }\n//     };\n\n//     const handleShare = () => {\n//         if (selectedFriend) {\n//             onShare(selectedFriend);\n//             setSelectedFriend('');  // Reset selection after sharing\n//         } else {\n//             alert('Please select a friend to share the watchlist with.');\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <select value={selectedFriend} onChange={(e) => setSelectedFriend(e.target.value)} className=\"border p-2 rounded\">\n//                 <option value=\"\">Select a friend</option>\n//                 {friends.map(friend => (\n//                     <option key={friend.id} value={friend.id}>\n//                         {friend.username}\n//                     </option>\n//                 ))}\n//             </select>\n//             <button onClick={handleShare} className=\"ml-2 btn bg-blue-500 hover:bg-blue-700 text-white p-2 rounded\">\n//                 Share Watchlist\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default ShareWatchlist;","map":{"version":3,"names":[],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/components/common/ShareWatchlist.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { supabase } from '../../supabaseClient';\n\n// const ShareWatchlist = ({ onShare, userId }) => {\n//     const [friends, setFriends] = useState([]);\n//     const [selectedFriend, setSelectedFriend] = useState('');\n\n//     useEffect(() => {\n//         if (!userId) return;  // Only fetch if userId is available\n//         fetchFriends();\n//     }, [userId]);  // Add userId as a dependency\n\n//     const fetchFriends = async () => {\n//         const { data, error } = await supabase\n//             .from('friends')\n//             .select(`\n//                 friend_id,\n//                 profile:friend_id (\n//                     username\n//                 )  // Fetching username from the related profiles table\n//             `)\n//             .eq('user_id', userId)\n//             .eq('status', 'accepted');\n\n//         console.log('Fetched friends:', data);  // Debugging (optional\n//         if (error) {\n//             console.error('Error fetching friends:', error.message);\n//         } else {\n//             setFriends(data.map(friend => ({\n//                 id: friend.friend_id,\n//                 username: friend.profile.username  // Ensure 'profile' is the correct relationship alias\n//             })));\n            \n//         }\n//     };\n\n//     const handleShare = () => {\n//         if (selectedFriend) {\n//             onShare(selectedFriend);\n//             setSelectedFriend('');  // Reset selection after sharing\n//         } else {\n//             alert('Please select a friend to share the watchlist with.');\n//         }\n//     };\n\n\n//     return (\n//         <div>\n//             <select value={selectedFriend} onChange={(e) => setSelectedFriend(e.target.value)} className=\"border p-2 rounded\">\n//                 <option value=\"\">Select a friend</option>\n//                 {friends.map(friend => (\n//                     <option key={friend.id} value={friend.id}>\n//                         {friend.username}\n//                     </option>\n//                 ))}\n//             </select>\n//             <button onClick={handleShare} className=\"ml-2 btn bg-blue-500 hover:bg-blue-700 text-white p-2 rounded\">\n//                 Share Watchlist\n//             </button>\n//         </div>\n//     );\n// };\n\n// export default ShareWatchlist;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}