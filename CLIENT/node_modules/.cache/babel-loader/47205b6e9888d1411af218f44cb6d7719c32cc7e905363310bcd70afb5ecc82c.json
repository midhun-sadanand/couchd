{"ast":null,"code":"var _jsxFileName = \"/Users/midhu1/Projects/mediaconsumption/CLIENT/src/components/common/ShareWatchlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ShareWatchlist = ({\n  onShare,\n  userId\n}) => {\n  _s();\n  const [friends, setFriends] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState('');\n  useEffect(() => {\n    console.log('Current userId!! : ', userId);\n    if (!userId) return; // Only fetch if userId is available\n    fetchFriends();\n  }, [userId]); // Add userId as a dependency\n\n  const fetchFriends = async () => {\n    const {\n      data,\n      error\n    } = await supabase.from('friends').select(`\n                friend_id,\n                friend_profile:profiles (username)  // Assuming 'profiles' is a table and you're trying to fetch 'username'\n            `).eq('user_id', userId).eq('status', 'accepted');\n    if (error) {\n      console.error('Error fetching friends:', error.message);\n    } else {\n      console.log('Fetched friends data:', data); // Logs successful data fetch.\n\n      setFriends(data.map(friend => ({\n        id: friend.friend_id,\n        username: friend.friend_profile.username // Assuming the returned data structure from the query\n      })));\n    }\n  };\n  const handleShare = () => {\n    if (selectedFriend) {\n      onShare(selectedFriend);\n      setSelectedFriend(''); // Reset selection after sharing\n    } else {\n      alert('Please select a friend to share the watchlist with.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedFriend,\n      onChange: e => setSelectedFriend(e.target.value),\n      className: \"border p-2 rounded\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select a friend\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), friends.map(friend => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: friend.id,\n        children: friend.username\n      }, friend.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShare,\n      className: \"ml-2 btn bg-blue-500 hover:bg-blue-700 text-white p-2 rounded\",\n      children: \"Share Watchlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(ShareWatchlist, \"rqH6pPm8ICXb3IM8iRMNwBNXRk0=\");\n_c = ShareWatchlist;\nexport default ShareWatchlist;\nvar _c;\n$RefreshReg$(_c, \"ShareWatchlist\");","map":{"version":3,"names":["React","useState","useEffect","supabase","jsxDEV","_jsxDEV","ShareWatchlist","onShare","userId","_s","friends","setFriends","selectedFriend","setSelectedFriend","console","log","fetchFriends","data","error","from","select","eq","message","map","friend","id","friend_id","username","friend_profile","handleShare","alert","children","value","onChange","e","target","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/midhu1/Projects/mediaconsumption/CLIENT/src/components/common/ShareWatchlist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../../supabaseClient';\n\nconst ShareWatchlist = ({ onShare, userId }) => {\n    const [friends, setFriends] = useState([]);\n    const [selectedFriend, setSelectedFriend] = useState('');\n\n    useEffect(() => {\n        \n        console.log('Current userId!! : ', userId);\n\n        if (!userId) return;  // Only fetch if userId is available\n        fetchFriends();\n    }, [userId]);  // Add userId as a dependency\n\n    const fetchFriends = async () => {\n        const { data, error } = await supabase\n            .from('friends')\n            .select(`\n                friend_id,\n                friend_profile:profiles (username)  // Assuming 'profiles' is a table and you're trying to fetch 'username'\n            `)\n            .eq('user_id', userId)\n            .eq('status', 'accepted');\n    \n        if (error) {\n            console.error('Error fetching friends:', error.message);\n        } else {\n            console.log('Fetched friends data:', data); // Logs successful data fetch.\n\n            setFriends(data.map(friend => ({\n                id: friend.friend_id,\n                username: friend.friend_profile.username  // Assuming the returned data structure from the query\n            })));\n        }\n    };\n    \n\n    const handleShare = () => {\n        if (selectedFriend) {\n            onShare(selectedFriend);\n            setSelectedFriend('');  // Reset selection after sharing\n        } else {\n            alert('Please select a friend to share the watchlist with.');\n        }\n    };\n\n\n    return (\n        <div>\n            <select value={selectedFriend} onChange={(e) => setSelectedFriend(e.target.value)} className=\"border p-2 rounded\">\n                <option value=\"\">Select a friend</option>\n                {friends.map(friend => (\n                    <option key={friend.id} value={friend.id}>\n                        {friend.username}\n                    </option>\n                ))}\n            </select>\n            <button onClick={handleShare} className=\"ml-2 btn bg-blue-500 hover:bg-blue-700 text-white p-2 rounded\">\n                Share Watchlist\n            </button>\n        </div>\n    );\n};\n\nexport default ShareWatchlist;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}